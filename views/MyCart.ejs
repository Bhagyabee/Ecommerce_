<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('./partials/head'); %>
    <title>Your Cart</title>
    <style>
      body {
        font-family: "Arial", sans-serif; /* Clean, modern font */
        background-color: #f7f9fc; /* Light background color */
        color: #333; /* Dark text for readability */
      }

      h1,
      h3 {
        text-align: center; /* Center headings */
        color: #007bff; /* Matching color for headings */
      }

      .container {
        max-width: 1200px; /* Maximum width for the container */
        margin: auto; /* Center the container */
        padding: 20px; /* Spacing around content */
      }

      #cart-items {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap; /* Allow items to wrap */
        justify-content: center; /* Center items */
        margin: 20px 0; /* Spacing above and below items */
      }

      .card {
        width: 200px; /* Set fixed width for cards */
        margin: 15px; /* Space between cards */
        border: 1px solid #e5e5e5; /* Light border */
        border-radius: 10px; /* Rounded corners */
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
        background-color: white; /* White background for cards */
        transition: transform 0.2s; /* Smooth hover effect */
      }

      .card:hover {
        transform: translateY(-5px); /* Lift card on hover */
      }

      .card-img-top {
        max-height: 200px; /* Set a maximum height for the images */
        width: 100%; /* Ensure the images fill the width of the card */
        object-fit: contain; /* Ensure images are fully visible, but don't stretch */
        border-bottom: 1px solid #e5e5e5; /* Optional: Add a border for a clean separation */
      }

      .card-body {
        padding: 15px; /* Spacing inside card */
      }

      .btn-quantity {
        width: 30px; /* Fixed button size */
        height: 30px; /* Fixed button height */
        border-radius: 5px; /* Slightly rounded buttons */
      }

      .btn-outline-secondary {
        color: #007bff; /* Button text color */
        border-color: #007bff; /* Button border color */
      }

      .btn-outline-secondary:hover {
        background-color: #007bff; /* Button hover background */
        color: white; /* Button hover text color */
      }

      #total-price {
        font-weight: bold; /* Bold total price */
        font-size: 1.5em; /* Larger font size for emphasis */
        color: #333; /* Dark color for total price */
      }

      @media (max-width: 768px) {
        #cart-items {
          flex-direction: column; /* Stack items on small screens */
          align-items: center; /* Center items */
        }
      }
    </style>
  </head>
  <body>
    <header><%- include('./partials/navbar'); %></header>

    <main>
      <div class="container mt-5">
        <h1>Your Cart</h1>
        <div id="cart-items" class="d-flex flex-column justify-content-center">
          <% let totalPrice = 0; %> <% if (cartItems.length > 0) { %> <%
          cartItems.forEach(item => { %>
          <div class="col-md-3 my-3">
            <div class="card mb-2" id="card-<%= item._id %>">
              <img
                src="<%= item.product.image %>"
                class="card-img-top"
                alt="<%= item.product.name %>"
              />
              <div class="card-body">
                <h5 class="card-title"><%= item.product.name %></h5>
                <p>Price: $<%= item.price.toFixed(2) %></p>
                <% const itemTotalPrice = item.price * item.quantity; %>
                <p>
                  Quantity:
                  <span id="quantity-<%= item._id %>"
                    ><%= item.quantity %></span
                  >
                </p>
                <div class="d-flex justify-content-center align-items-center">
                  <button
                    class="btn btn-outline-secondary btn-quantity"
                    onclick="updateQuantity('<%= item._id %>', 'decrease')"
                  >
                    -
                  </button>
                  <button
                    class="btn btn-outline-secondary btn-quantity"
                    onclick="updateQuantity('<%= item._id %>', 'increase')"
                  >
                    +
                  </button>
                </div>
              </div>
            </div>
          </div>
          <% totalPrice += itemTotalPrice; %> <% }); %> <% } else { %>
          <p class="text-center">Your cart is empty.</p>
          <% } %>
        </div>
        <h3>
          Total Price: $<span id="total-price"
            ><%= totalPrice.toFixed(2) %></span
          >
        </h3>

        <button type="submit" id="orderNow" class="btn-outline-secondary">
          Order Now
        </button>
      </div>
    </main>

    <script>
      async function fetchCartItems() {
        const token = localStorage.getItem("token");

        try {
          const response = await fetch("/api/cart/", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
          });

          if (!response.ok) {
            throw new Error("Failed to fetch cart items");
          }

          const cartData = await response.json();
          renderCartItems(cartData.items);
        } catch (error) {
          console.error("Error fetching cart items:", error);
        }
      }

      async function updateQuantity(itemId, action) {
        const quantityElement = document.getElementById(`quantity-${itemId}`);
        let currentQuantity = parseInt(quantityElement.textContent);

        quantityElement.textContent = currentQuantity; // Update the displayed quantity
        const totalPriceElement = document.getElementById("total-price");
        const newTotalPrice = calculateTotalPrice(); // Update total price
        totalPriceElement.textContent = newTotalPrice.toFixed(2); // Display updated total price

        const token = localStorage.getItem("token");

        try {
          let newQuantity = currentQuantity;
          if (action === "increase") {
            newQuantity += 1;
          } else if (action === "decrease") {
            if (currentQuantity > 1) {
              newQuantity -= 1;
            } else {
              // If trying to decrease below 1, remove the item
              await removeItemFromCart(itemId);
              return;
            }
          }
          const response = await fetch(`/api/cart/updateQuantity`, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ itemId, quantity: newQuantity }),
          });
          const cartData = await response.json();
          if (response.ok) {
            // Update the displayed quantity only if the stock is sufficient

            quantityElement.textContent = newQuantity; // Update the displayed quantity
            const totalPriceElement = document.getElementById("total-price");
            const newTotalPrice = calculateTotalPrice(); // Update total price
            totalPriceElement.textContent = newTotalPrice.toFixed(2); // Display upda // Display updated total price
          } else {
            alert("Failed to update cart: " + cartData.message);
            console.error(cartData.message); // Log the error message
          }
        } catch (error) {
          console.error("Error updating cart:", error);
          alert("An error occurred while updating the cart.");
        }
      }

      function calculateTotalPrice() {
        let totalPrice = 0;

        document.querySelectorAll(".card-body").forEach((card) => {
          const price = parseFloat(
            card.querySelector("p:nth-child(2)").textContent.split("$")[1]
          );
          const quantity = parseInt(card.querySelector("span").textContent);
          totalPrice += price * quantity;
        });
        return totalPrice;
      }

      async function removeItemFromCart(itemId) {
        const cardElement = document.getElementById(`card-${itemId}`);
        const token = localStorage.getItem("token");

        try {
          const response = await fetch("/api/cart/removeItem", {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ itemId }),
          });

          if (!response.ok) {
            throw new Error("Failed to remove item from cart");
          }

          cardElement.remove();

          const totalPriceElement = document.getElementById("total-price");
          const newTotalPrice = calculateTotalPrice();
          totalPriceElement.textContent = newTotalPrice.toFixed(2);
        } catch (error) {
          console.error("Error removing item from cart");
        }
      }

      function renderCartItems(cartItems) {
        const cartItemsContainer = document.getElementById("cart-items");
        cartItemsContainer.innerHTML = "";
        if (cartItems.length === 0) {
          cartItemsContainer.innerHTML =
            "<p class='text-center'>Your cart is empty.</p>";
          return;
        }

        cartItems.forEach((item) => {
          const itemElement = document.createElement("div");
          itemElement.className = "col-md-3 my-3";
          itemElement.innerHTML = `
            <div class="card mb-2" id="card-${item._id}">
              <img src="${item.product.image}" class="card-img-top" alt="${
            item.product.name
          }" />
              <div class="card-body">
                <h5 class="card-title">${item.product.name}</h5>
                <p>Price: $${item.price.toFixed(2)}</p>
                <p>Quantity: <span id="quantity-${item._id}">${
            item.quantity
          }</span></p>
                <div class="d-flex justify-content-center align-items-center">
                  <button class="btn btn-outline-secondary btn-quantity" onclick="updateQuantity('${
                    item._id
                  }', 'decrease')">-</button>
                  <button class="btn btn-outline-secondary btn-quantity" onclick="updateQuantity('${
                    item._id
                  }', 'increase')">+</button>
                </div>
              </div>
            </div>`;
          cartItemsContainer.appendChild(itemElement);
        });

        const totalPriceElement = document.getElementById("total-price");
        totalPriceElement.textContent = calculateTotalPrice().toFixed(2);
      }

      document.addEventListener("DOMContentLoaded", fetchCartItems);

      document
        .getElementById("orderNow")
        .addEventListener("click", async (e) => {
          e.preventDefault();
          const token = localStorage.getItem("token");
          const items = [];

          document.querySelectorAll(".card-body").forEach((card) => {
            const itemId = card.querySelector("div").id.split("-")[1];
            const quantity = parseInt(card.querySelector("span").textContent);
            items.push({ itemId, quantity });
          });

          const totalPrice = calculateTotalPrice();

          try {
            const response = await fetch("/api/orders/placeOrder", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify({
                items,
                totalPrice,
              }),
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || "Error creating account");
            }

            const result = await response.json();

            window.location.href = `/api/orders/details/${result.orderId}`;
            alert("Order placed successfully!");
          } catch (error) {
            console.error(error);
            alert(`Failed to Order : ${error.message}`);
          }
        });
    </script>
  </body>
</html>
